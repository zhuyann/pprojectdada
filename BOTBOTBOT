
import java.awt.image.BufferedImage;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import nl.vu.cs.softmod.examples.MultiRobot.Direction;

import simbad.sim.Agent;
import simbad.sim.CameraSensor;
import simbad.sim.RobotFactory;

public class RoverSimulator extends Agent {
	private String currentMode;
	private int maxDistance = 4;
	double Velocity;
	BufferedImage[] picArray;
	int numberOfImages;
	BufferedImage cameraImage;
	CameraSensor camera;
	Vector3d initialPosition;
	// private int maxDistance = EnvironmentSimulator.WORLD_SIZE / 2 - 1;

	public RoverSimulator(Vector3d position, String name) {

		super(position, name);
		Velocity = 0.5;
		initialPosition = position;
		RobotFactory.addSonarBeltSensor(this, 4);
		camera = RobotFactory.addCameraSensor(this);
		cameraImage = camera.createCompatibleImage();
		picArray = new BufferedImage[10];
		numberOfImages = 0;

	}

	private Point3d location() {
		Point3d loc = new Point3d();
		this.getCoords(loc);
		return loc;
	}

	private boolean onTheCellEdge() {

		Point3d loc = location();
		
		
	 return initialPosition.getX()-1 >= loc.getX() || loc.getX() >=(initialPosition.getX() + maxDistance)
		 || initialPosition.getZ()+1 <= loc.getZ() || loc.getZ() <=(initialPosition.getZ() - maxDistance);

	}

	public void initBehavior() {
		setTranslationalVelocity(Velocity);
	}

	public void performBehavior() {
        
		
			setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));

			if (onTheCellEdge()) {
				this.state = State.EDGE_OF_CELL;
			} else if (bumpers.oneHasHit()) {
				switch (state) {
				case AVOIDING_OBSTACLE:
					this.state = State.MOVING;
					break;
				default:
					this.state = State.AVOIDING_OBSTACLE;
					break;
				}
			} else {
				this.state = State.MOVING;
			}

			if (this.state == State.MOVING) {
				this.setTranslationalVelocity(Velocity);

				Point3d loc = location();
				for (int i = myCell.coordinatePool.length-1; i>=0; i--) {
					if ((Math.abs((Math.abs((double)myCell.coordinatePool[i].getXValue()) - Math.abs(loc.x))) < 0.2 ) && 
						(Math.abs((Math.abs((double)myCell.coordinatePool[i].getYValue()) - Math.abs(loc.z))) < 0.2 )) {
						// take photo and remove coordinate from coordinate pool if rover is close to coordinate from coordinate pool
						//	takePhoto();
						myCell.removeFromCoordinatePool(myCell.coordinatePool[i]);
						mainEnvironment.removeFromCoordinatePool(mainEnvironment.coordinatePool[i]);
					}
				}
			} else {
				this.Velocity = -Velocity;
				this.setTranslationalVelocity(Velocity);
			}

		}
	}

	public void stopRover() {
		setTranslationalVelocity(0.0);
		setRotationalVelocity(0);
	}

	public void takePhoto() {
		camera.copyVisionImage(cameraImage);
		picArray[numberOfImages] = cameraImage;
		numberOfImages++;
	}

}
