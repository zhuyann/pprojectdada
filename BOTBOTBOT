
import java.awt.image.BufferedImage;

import javax.media.j3d.Transform3D;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import simbad.sim.Agent;
import simbad.sim.CameraSensor;
import simbad.sim.LightSensor;
import simbad.sim.RangeSensorBelt;
import simbad.sim.RobotFactory;

public class RoverSimulator extends Agent {
	private State state;
	private RangeSensorBelt sonars, bumpers;
	private LightSensor sensorLeft, sensorRight, sensorRearLeft, sensorRearRight;
	private double Velocity;
	private Vector3d initialPosition;

	BufferedImage[] picArray;
	int numberOfImages;
	BufferedImage cameraImage;
	CameraSensor camera;

	Environment myCell;
	Environment mainEnvironment;
	private double maxDistance;

	public RoverSimulator (Vector3d position, String name, Environment cell, Environment environment){   

		super(position, name);

		Velocity = 1;
		initialPosition = position;
		mainEnvironment.
		picArray = new BufferedImage[10];
		numberOfImages = 0;

		sonars = RobotFactory.addSonarBeltSensor(this, 24);
		sensorLeft = RobotFactory.addLightSensorLeft(this);
		sensorRight = RobotFactory.addLightSensorRight(this);
		sensorRearLeft = addLightSensorRearLeft(this);
		sensorRearRight = addLightSensorRearRight(this);

		camera = RobotFactory.addCameraSensor(this);
		cameraImage = camera.createCompatibleImage();
		bumpers = RobotFactory.addBumperBeltSensor(this, 24);
		myCell = cell;
		
		maxDistance = 5 - 1.6;
	}

	static public LightSensor addLightSensorRearRight(Agent agent) {
		Vector3d front = new Vector3d(agent.getRadius() + 0.5, 0, 0);
		Transform3D t3d = new Transform3D();
		t3d.rotY((-Math.PI / 4) * 3);
		Vector3d right = new Vector3d(front);
		t3d.transform(right);
		return RobotFactory.addLightSensor(agent, right, (float) (-Math.PI / 4) * 3, "rear_right");
	}

	static public LightSensor addLightSensorRearLeft(Agent agent) {
		Vector3d front = new Vector3d(agent.getRadius() + 0.5, 0, 0);
		Transform3D t3d = new Transform3D();
		t3d.rotY((Math.PI / 4) * 3);
		Vector3d right = new Vector3d(front);
		t3d.transform(right);
		return RobotFactory.addLightSensor(agent, right, (float) (Math.PI / 4) * 3, "rear_left");
	}

	private Point3d location() {
		Point3d loc = new Point3d();
		this.getCoords(loc);
		return loc;
	}

	public void initBehavior() {
		setTranslationalVelocity(1);
	}

	private boolean onTheCellEdge() {
		Point3d loc = location();

		return initialPosition.getX() - 0.1 >= loc.getX() || loc.getX() >= (initialPosition.getX() + maxDistance)
				|| initialPosition.getZ() + 0.1 <= loc.getZ() || loc.getZ() <= (initialPosition.getZ() - maxDistance);
	}

	public void performBehavior() {
		if (state == State.Go_To_the_lamp) {

		}

		else {

			setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));

			if (onTheCellEdge()) {
				this.state = State.EDGE_OF_CELL;
			} else if (bumpers.oneHasHit()) {
				switch (state) {
				case AVOIDING_OBSTACLE:
					this.state = State.MOVING;
					break;
				default:
					this.state = State.AVOIDING_OBSTACLE;
					break;
				}
			} else {
				this.state = State.MOVING;
			}

			if (this.state == State.MOVING) {
				this.setTranslationalVelocity(Velocity);

				Point3d loc = location();
				for (int i = myCell.coordinatePool.length-1; i>=0; i--) {
					if ((Math.abs((Math.abs((double)myCell.coordinatePool[i].getXValue()) - Math.abs(loc.x))) < 0.2 ) && 
						(Math.abs((Math.abs((double)myCell.coordinatePool[i].getYValue()) - Math.abs(loc.z))) < 0.2 )) {
						// take photo and remove coordinate from coordinate pool if rover is close to coordinate from coordinate pool
						//	takePhoto();
						myCell.removeFromCoordinatePool(myCell.coordinatePool[i]);
						mainEnvironment.removeFromCoordinatePool(mainEnvironment.coordinatePool[i]);
					}
				}
			} else {
				this.Velocity = -Velocity;
				this.setTranslationalVelocity(Velocity);
			}

		}
	}

	public void stopRover() {
		setTranslationalVelocity(0.0);
		setRotationalVelocity(0);
	}

	public void takePhoto() {
		camera.copyVisionImage(cameraImage);
		picArray[numberOfImages] = cameraImage;
		numberOfImages++;
	}
}
