
setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));

			if (onTheCellEdge()) {
				this.state = State.EDGE_OF_CELL;
			} else if (bumpers.oneHasHit()) {
				switch (state) {
				case AVOIDING_OBSTACLE:
					this.state = State.MOVING;
					break;
				default:
					this.state = State.AVOIDING_OBSTACLE;
					break;
				}
			} else {
				this.state = State.MOVING;
			}

			if (this.state == State.MOVING) {
				this.setTranslationalVelocity(Velocity);

				Point3d loc = location();
				for (int i = myCell.coordinatePool.length-1; i>=0; i--) {
					if ((Math.abs((Math.abs((double)myCell.coordinatePool[i].getXValue()) - Math.abs(loc.x))) < 0.2 ) && 
						(Math.abs((Math.abs((double)myCell.coordinatePool[i].getYValue()) - Math.abs(loc.z))) < 0.2 )) {
						// take photo and remove coordinate from coordinate pool if rover is close to coordinate from coordinate pool
						//	takePhoto();
						myCell.removeFromCoordinatePool(myCell.coordinatePool[i]);
						mainEnvironment.removeFromCoordinatePool(mainEnvironment.coordinatePool[i]);
					}
				}
			} else {
				this.Velocity = -Velocity;
				this.setTranslationalVelocity(Velocity);
			}
